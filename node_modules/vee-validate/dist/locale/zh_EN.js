! function (n, e) {
    "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (n.__vee_validate_locale__zh_CN = n.__vee_validate_locale__zh_CN || {}, n.__vee_validate_locale__zh_CN.js = e())
}(this, function () {
    "use strict";
    var n, e = {
        name: "zh_CN",
        messages: {
            after: function (n, e) {
                return " " + n + "必须在" + e[0] + "之后"
            },
            alpha_dash: function (n) {
                return "能够包含字母数字字符，包括破折号、下划线"
            },
            alpha_num: function (n) {
                return "It must contain letters and numbers"
            },
            alpha_spaces: function (n) {
                return " " + n + " 只能包含字母字符，包括空格."
            },
            alpha: function (n) {
                return "It must be English"
            },
            before: function (n, e) {
                return " " + n + " 必须在" + e[0] + " 之前."
            },
            between: function (n, e) {
                return "It must be between " + e[0] + "-" + e[1]
            },
            confirmed: function (n, e) {
                return "两次密码不一致"
            },
            date_between: function (n, e) {
                return " " + n + "必须在" + e[0] + "和" + e[1] + "之间."
            },
            date_format: function (n, e) {
                return " " + n + "必须在在" + e[0] + "格式中."
            },
            decimal: function (n, e) {
                void 0 === e && (e = []);
                var t = e[0];
                return void 0 === t && (t = "*"), " " + n + " 必须是数字的而且能够保留" + ("*" === t ? "" : t) + " 位小数."
            },
            digits: function (n, e) {
                return "Formatting error"
            },
            dimensions: function (n, e) {
                return " " + n + "必须是 " + e[0] + " 像素到 " + e[1] + " 像素."
            },
            email: function (n) {
                return "Error mailbox"
            },
            ext: function (n) {
                return " " + n + " 必须是有效的文件."
            },
            image: function (n) {
                return " " + n + " 必须是图片."
            },
            in: function (n) {
                return "必须是一个有效值"
            },
            ip: function (n) {
                return "必须是一个有效的地址"
            },
            max: function (n, e) {
                return "No more than " + e[0] + " characters"
            },
            max_value: function (n, e) {
                return " " + n + " 必须小于或等于" + e[0] + "."
            },
            mimes: function (n) {
                return " " + n + " 必须是有效的文件类型."
            },
            min: function (n, e) {
                return "At least " + e[0] + " characters"
            },
            min_value: function (n, e) {
                return " " + n + " 必须大于或等于" + e[0] + "."
            },
            not_in: function (n) {
                return " " + n + "必须是一个有效值."
            },
            numeric: function (n) {
                return "It must be a number"
            },
            regex: function (n) {
                return "格式无效"
            },
            required: function (n) {
                return "Can not be empty"
            },
            size: function (n, e) {
                var t, r, u, i = e[0];
                return " " + n + " 必须小于 " + (t = i, r = 1024, u = 0 == (t = Number(t) * r) ? 0 : Math.floor(Math.log(t) / Math.log(r)), 1 * (t / Math.pow(r, u)).toFixed(2) + " " + ["Byte", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"][u]) + "."
            },
            url: function (n) {
                return "Not effective URL"
            },
            number:function(n){
                return "Not a number"
            },
            website:function(n){
                return "Not a vaild url" 
            }
        },
        attributes: {}
    };
    return "undefined" != typeof VeeValidate && VeeValidate.Validator.localize(((n = {})[e.name] = e, n)), e
});
